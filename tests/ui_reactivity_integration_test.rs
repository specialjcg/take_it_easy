// tests/ui_reactivity_integration_test.rs - Test d'int√©gration end-to-end pour r√©activit√© UI
// Test TDD pour mesurer si placement premi√®re tuile < 1s

use std::time::{Duration, Instant};
use tokio::time::sleep;
use tonic::Request;

use take_it_easy::generated::takeiteasygame::v1::*;
use take_it_easy::services::game_service::GameServiceImpl;
use take_it_easy::services::session_manager::SessionManager;
use take_it_easy::neural::policy_value_net::{PolicyNet, ValueNet};
use std::sync::Arc;
use tokio::sync::Mutex;
use tch::nn::VarStore;

#[tokio::test]
async fn test_first_tile_placement_speed_under_1_second() {
    // ============================================================================
    // SETUP - Cr√©er un service de jeu complet
    // ============================================================================

    let session_manager = Arc::new(SessionManager::new().expect("Failed to create session manager"));

    // Cr√©er VarStore pour les r√©seaux de neurones
    let vs = VarStore::new(tch::Device::Cpu);
    let policy_net = Arc::new(Mutex::new(PolicyNet::new(&vs.root(), (19, 3, 3))));
    let value_net = Arc::new(Mutex::new(ValueNet::new(&vs.root(), (19, 3, 3))));

    let game_service = GameServiceImpl::new(
        session_manager.clone(),
        policy_net.clone(),
        value_net.clone(),
        50 // R√©duire les simulations pour test
    );

    // ============================================================================
    // √âTAPE 1 - Cr√©er une session et d√©marrer un tour (setup initial)
    // ============================================================================

    // Simuler la cr√©ation de session (simplifi√©e pour test)
    let session_id = "test-session-123".to_string();

    // D√©marrer un tour pour avoir une tuile disponible
    let start_turn_request = Request::new(StartTurnRequest {
        session_id: session_id.clone(),
    });

    let start_turn_response = game_service.start_turn(start_turn_request).await
        .expect("Failed to start turn");

    // V√©rifier qu'on a bien une tuile
    assert!(start_turn_response.get_ref().success, "Start turn should succeed");
    assert!(!start_turn_response.get_ref().announced_tile.is_empty(), "Should have announced tile");

    // Attendre que le syst√®me soit compl√®tement initialis√©
    sleep(Duration::from_millis(100)).await;

    // ============================================================================
    // √âTAPE 2 - TEST PRINCIPAL : Mesurer temps de r√©ponse au premier placement
    // ============================================================================

    let start_time = Instant::now();

    // Simuler le placement d'une tuile par le joueur humain
    let make_move_request = Request::new(MakeMoveRequest {
        session_id: session_id.clone(),
        player_id: "TestPlayer".to_string(),
        move_data: r#"{"position": 9}"#.to_string(), // Position centrale du plateau
        timestamp: chrono::Utc::now().timestamp(),
    });

    let move_response = game_service.make_move(make_move_request).await
        .expect("Failed to make move");

    let response_time = start_time.elapsed();

    // ============================================================================
    // ASSERTIONS - Le test DOIT √©chouer initialement (RED)
    // ============================================================================

    println!("‚è±Ô∏è  Temps de r√©ponse premier placement: {:?}", response_time);

    // üî¥ RED: Ce test DOIT √©chouer au d√©but avec le syst√®me actuel
    assert!(response_time < Duration::from_millis(1000),
            "‚ùå √âCHEC ATTENDU: Placement premi√®re tuile trop lent: {:?} (doit √™tre < 1000ms)",
            response_time);

    // V√©rifier que la r√©ponse est un succ√®s
    match move_response.get_ref().result.as_ref() {
        Some(make_move_response::Result::Success(success)) => {
            assert!(!success.is_game_over, "Game should not be over after first move");
            println!("‚úÖ Mouvement accept√© avec temps: {:?}", response_time);
        }
        Some(make_move_response::Result::Error(error)) => {
            panic!("‚ùå Erreur lors du placement: {} - {}", error.code, error.message);
        }
        None => {
            panic!("‚ùå R√©ponse vide du serveur");
        }
    }
}

#[tokio::test]
async fn test_immediate_feedback_without_waiting_mcts() {
    // ============================================================================
    // TEST SP√âCIFIQUE : V√©rifier que l'UI n'attend pas MCTS pour confirmer
    // ============================================================================

    let session_manager = Arc::new(SessionManager::new().expect("Failed to create session manager"));

    // Cr√©er VarStore pour les r√©seaux de neurones
    let vs = VarStore::new(tch::Device::Cpu);
    let policy_net = Arc::new(Mutex::new(PolicyNet::new(&vs.root(), (19, 3, 3))));
    let value_net = Arc::new(Mutex::new(ValueNet::new(&vs.root(), (19, 3, 3))));

    let game_service = GameServiceImpl::new(
        session_manager.clone(),
        policy_net,
        value_net,
        300 // MCTS normal lent pour forcer le test
    );

    // Cr√©er un √©tat de jeu avec tuile disponible
    let session_id = "immediate-test-456".to_string();

    let start_turn_request = Request::new(StartTurnRequest {
        session_id: session_id.clone(),
    });

    game_service.start_turn(start_turn_request).await
        .expect("Failed to start turn");

    // ============================================================================
    // MESURE CRITIQUE : Temps de feedback imm√©diat
    // ============================================================================

    let start_time = Instant::now();

    let make_move_request = Request::new(MakeMoveRequest {
        session_id: session_id.clone(),
        player_id: "ImmediatePlayer".to_string(),
        move_data: r#"{"position": 5}"#.to_string(),
        timestamp: chrono::Utc::now().timestamp(),
    });

    let move_response = game_service.make_move(make_move_request).await
        .expect("Failed to make move");

    let immediate_response_time = start_time.elapsed();

    // ============================================================================
    // CRIT√àRE SUCCESS : Feedback en moins de 100ms
    // ============================================================================

    println!("‚ö° Temps feedback imm√©diat: {:?}", immediate_response_time);

    // üéØ GREEN TARGET: R√©ponse imm√©diate < 100ms
    assert!(immediate_response_time < Duration::from_millis(100),
            "Feedback imm√©diat doit √™tre < 100ms, √©tait: {:?}",
            immediate_response_time);

    // V√©rifier que le mouvement est accept√© avec statut "PROCESSING"
    match move_response.get_ref().result.as_ref() {
        Some(make_move_response::Result::Success(success)) => {
            // V√©rifier que MCTS est en cours de traitement
            assert!(success.mcts_response.contains("PROCESSING") ||
                    success.mcts_response.contains("Move accepted"),
                    "Response should indicate processing or acceptance");
            println!("‚úÖ Feedback imm√©diat re√ßu: {:?}", immediate_response_time);
        }
        _ => {
            panic!("‚ùå Pas de r√©ponse de succ√®s imm√©diate");
        }
    }
}

#[tokio::test]
async fn test_tile_placement_availability_state() {
    // ============================================================================
    // TEST √âTAT : V√©rifier que les clics sont autoris√©s d√®s qu'une tuile existe
    // ============================================================================

    let session_manager = Arc::new(SessionManager::new().expect("Failed to create session manager"));

    // Cr√©er VarStore pour les r√©seaux de neurones
    let vs = VarStore::new(tch::Device::Cpu);
    let policy_net = Arc::new(Mutex::new(PolicyNet::new(&vs.root(), (19, 3, 3))));
    let value_net = Arc::new(Mutex::new(ValueNet::new(&vs.root(), (19, 3, 3))));

    let game_service = GameServiceImpl::new(session_manager, policy_net, value_net, 50);

    let session_id = "state-test-789".to_string();

    // D√©marrer tour
    let start_turn_request = Request::new(StartTurnRequest {
        session_id: session_id.clone(),
    });

    let start_response = game_service.start_turn(start_turn_request).await
        .expect("Failed to start turn");

    // ============================================================================
    // V√âRIFICATIONS D'√âTAT CRITIQUE
    // ============================================================================

    // 1. Une tuile doit √™tre annonc√©e
    assert!(start_response.get_ref().success);
    assert!(!start_response.get_ref().announced_tile.is_empty());

    // 2. Les joueurs en attente ne doivent PAS emp√™cher les clics
    let waiting_players = &start_response.get_ref().waiting_for_players;
    println!("üîç Joueurs en attente: {:?}", waiting_players);

    // 3. Le mouvement doit √™tre possible IMM√âDIATEMENT apr√®s start_turn
    let immediate_move_request = Request::new(MakeMoveRequest {
        session_id: session_id.clone(),
        player_id: "StateTestPlayer".to_string(),
        move_data: r#"{"position": 12}"#.to_string(),
        timestamp: chrono::Utc::now().timestamp(),
    });

    let move_result = game_service.make_move(immediate_move_request).await;

    // LE MOUVEMENT DOIT R√âUSSIR m√™me si d'autres joueurs attendent
    assert!(move_result.is_ok(),
            "‚ùå Mouvement devrait √™tre autoris√© imm√©diatement apr√®s start_turn");

    match move_result.unwrap().get_ref().result.as_ref() {
        Some(make_move_response::Result::Success(_)) => {
            println!("‚úÖ Mouvement autoris√© imm√©diatement");
        }
        Some(make_move_response::Result::Error(error)) => {
            panic!("‚ùå Mouvement refus√©: {} - {}", error.code, error.message);
        }
        None => {
            panic!("‚ùå Pas de r√©ponse");
        }
    }
}
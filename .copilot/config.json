{
  "version": 1,
  "commands": {
    "audit": {
      "description": "Audit complet Rust (sécurité, performance, qualité, production)",
      "prompt": "Rôle : Tu es un expert en Rust (sécurité, performance et architecture logicielle). Contexte : Je souhaite améliorer la qualité de ce projet Rust. Tâche : Analyse le code et propose un plan d'amélioration structuré en phases (Critique, Performance, Qualité, Production). Pour chaque phase, propose actions concrètes, temps estimé, impact attendu. Dimensions à évaluer : 1. Hygiène du code, 2. Performance, 3. Qualité & maintenabilité, 4. Production. Format de sortie : résumé exécutif, plan d'action, priorisation, commandes Cargo recommandées.",
      "action": "@workspace summarize"
    },
    "arch": {
      "description": "Analyse d'architecture Rust (structure, patterns, flux de données)",
      "prompt": "Rôle : Tu es un architecte Rust senior spécialisé dans l'analyse de contexte et d'architecture. Mission : Comprendre et documenter l'architecture complète de cette application Rust. Analyse : structure générale, patterns architecturaux, flux de données, points d'entrée, dépendances critiques, domaine métier. Format : résumé du type d'app, structure src/, flux de données textuel, composants clés, points d'attention architecturaux.",
      "action": "@workspace summarize"
    },
    "context": {
      "description": "Analyse du contexte métier et technique Rust",
      "prompt": "Rôle : Analyste business & technique Rust. Mission : Comprendre le contexte métier et technique de cette application Rust. Questions : quel problème résout l'app, qui sont les utilisateurs, cas d’usage, contraintes techniques, intégrations externes, déploiement. Format : sections Contexte métier, Contexte technique, intégrations, contraintes, déploiement.",
      "action": "@workspace summarize"
    },
    "quality": {
      "description": "Évaluation qualité logicielle complète du projet Rust",
      "prompt": "Rôle : Expert qualité logicielle moderne avec expertise Rust. Mission : Évaluer la qualité du projet selon les standards 2025 : extensibilité, maintenabilité, lisibilité, testabilité, complexité, couverture, CI/CD, sécurité, documentation. Format : Score global, mesures qualitatives et quantitatives, plan d'amélioration prioritaire, quick wins, commandes cargo test recommandées.",
      "action": "@workspace summarize"
    },
    "tdd": {
      "description": "Analyse et amélioration de la pratique TDD en Rust",
      "prompt": "Rôle : Expert TDD en Rust. Mission : Analyser et améliorer la pratique du Test-Driven Development. Évalue le cycle RED-GREEN-REFACTOR, la qualité et organisation des tests, opportunités TDD, architecture testable, plan de mise en œuvre, stratégie cargo test. Format : État du TDD, analyse tests existants, opportunités TDD, plan d'implémentation, prochaines actions.",
      "action": "@workspace summarize"
    },
    "integration": {
      "description": "Analyse des tests d'intégration et end-to-end Rust",
      "prompt": "Rôle : Expert tests d'intégration et E2E en Rust. Mission : Analyser et optimiser la stratégie de tests d'intégration. Types de tests : unitaires, intégration, E2E, performance. Stack recommandée : tokio-test, testcontainers, wiremock, assert_cmd, tempfile, criterion. Format : stratégie tests, structure recommandée, exemples, commandes cargo test/bench, plan d'implémentation par phase, gaps critiques à combler.",
      "action": "@workspace summarize"
    },
    "e2e": {
      "description": "Analyse des tests end-to-end du projet Rust",
      "prompt": "Rôle : Expert tests E2E en Rust. Mission : Évaluer la stratégie et la couverture des tests end-to-end du projet Rust. Analyse : scénarios utilisateur, performance, monitoring, tests de charge, chaos testing. Fournis un plan d'amélioration et des commandes cargo adaptées.",
      "action": "@workspace summarize"
    },
    "refactor": {
      "description": "Application de la méthode Mikado pour refactoring sécurisé",
      "prompt": "Rôle : Expert refactoring avec Méthode Mikado. Principe : retirer un bâtonnet sans bouger les autres. Processus : essai, noter blocages, rollback, itérer jusqu'aux feuilles. Format : objectif, graphe Mikado (arborescence), prochaine action.",
      "action": "@workspace summarize"
    },
    "rust-refactor": {
      "description": "Refactoring Rust sécurisé avec méthode Mikado",
      "prompt": "Rôle : Expert Rust utilisant la Méthode Mikado. Spécificités : respecter borrow checker, sécurité mémoire, garanties de types, tester avec cargo check à chaque étape. Format : Graphe Mikado + commandes Rust spécifiques par étape.",
      "action": "@workspace summarize"
    },
    "rust-doc": {
      "description": "Génération et amélioration de documentation Rust",
      "prompt": "Rôle : Expert documentation Rust. Mission : Générer ou améliorer la documentation technique et métier complète. Objectifs : documenter modules, structures, fonctions, exemples, guides dev, cohérence avec README et docs existants. Format : doc technique, doc architecture, doc DevOps, propositions d'amélioration.",
      "action": "@workspace summarize"
    }
  },
  "defaultContextCommand": "@workspace index && @workspace summarize"
}

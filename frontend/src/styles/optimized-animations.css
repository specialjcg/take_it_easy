/* =============================================================================
   OPTIMIZED ANIMATIONS - Solutions UX pour éliminer les flashs/scintillements
   ============================================================================= */

/* Variables pour les transitions optimisées */
:root {
  --transition-fast: 150ms ease-out;
  --transition-normal: 250ms ease-out;
  --transition-slow: 400ms ease-out;
  --transition-bounce: 300ms cubic-bezier(0.68, -0.55, 0.265, 1.55);
  
  /* Couleurs d'état optimisées */
  --loading-bg: rgba(59, 130, 246, 0.1);
  --loading-border: rgba(59, 130, 246, 0.3);
  --success-bg: rgba(34, 197, 94, 0.1);
  --success-border: rgba(34, 197, 94, 0.3);
  --error-bg: rgba(239, 68, 68, 0.1);
  --error-border: rgba(239, 68, 68, 0.3);
}

/* =============================================================================
   SOLUTION #1: Loading states sans flash
   ============================================================================= */

.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(2px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  
  /* Animation d'apparition douce */
  opacity: 0;
  visibility: hidden;
  transition: 
    opacity var(--transition-fast),
    visibility var(--transition-fast);
}

.loading-overlay.visible {
  opacity: 1;
  visibility: visible;
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: #fff;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { 
    transform: rotate(360deg); 
  }
}

/* Loading state pour composants individuels */
.component-loading {
  position: relative;
  transition: opacity var(--transition-normal);
}

.component-loading::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--loading-bg);
  border: 1px solid var(--loading-border);
  border-radius: inherit;
  z-index: 10;
  
  /* Animation de pulsation subtile */
  opacity: 0;
  animation: pulse-loading 2s ease-in-out infinite;
  transition: opacity var(--transition-fast);
}

.component-loading.active::before {
  opacity: 1;
}

@keyframes pulse-loading {
  0%, 100% { 
    opacity: 0.3;
    transform: scale(1); 
  }
  50% { 
    opacity: 0.6;
    transform: scale(1.02); 
  }
}

/* =============================================================================
   SOLUTION #2: Transitions d'état fluides
   ============================================================================= */

.status-message {
  padding: 12px 24px;
  border-radius: 8px;
  margin: 8px 0;
  font-weight: 500;
  
  /* Transitions fluides pour tous les changements */
  transition: 
    all var(--transition-normal),
    transform var(--transition-bounce);
  
  /* État par défaut */
  opacity: 0;
  transform: translateY(-10px) scale(0.95);
  max-height: 0;
  overflow: hidden;
}

.status-message.visible {
  opacity: 1;
  transform: translateY(0) scale(1);
  max-height: 100px; /* Assez pour le contenu */
}

/* Variantes d'état avec couleurs distinctes */
.status-message.success {
  background: var(--success-bg);
  border: 1px solid var(--success-border);
  color: #22c55e;
}

.status-message.error {
  background: var(--error-bg);
  border: 1px solid var(--error-border);
  color: #ef4444;
}

.status-message.info {
  background: var(--loading-bg);
  border: 1px solid var(--loading-border);
  color: #3b82f6;
}

/* Animation d'apparition avec bounce subtle */
.status-message.entering {
  animation: status-enter var(--transition-bounce) forwards;
}

@keyframes status-enter {
  0% {
    opacity: 0;
    transform: translateY(-20px) scale(0.9);
  }
  60% {
    transform: translateY(2px) scale(1.02);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* =============================================================================
   SOLUTION #3: Optimisations Canvas et jeu
   ============================================================================= */

.game-board-container {
  position: relative;
  transition: opacity var(--transition-normal);
}

/* État de redraw en cours - légère opacité */
.game-board-container.redrawing {
  opacity: 0.95;
}

/* Canvas avec transition douce */
.game-canvas {
  transition: 
    opacity var(--transition-fast),
    filter var(--transition-fast);
  
  /* Anti-aliasing optimisé */
  image-rendering: -webkit-optimize-contrast;
  image-rendering: crisp-edges;
}

.game-canvas.loading {
  opacity: 0.7;
  filter: blur(1px);
}

/* Overlay pour actions de jeu */
.tile-click-feedback {
  position: absolute;
  pointer-events: none;
  border-radius: 50%;
  background: rgba(34, 197, 94, 0.3);
  border: 2px solid rgba(34, 197, 94, 0.6);
  
  /* Animation de feedback immédiat */
  opacity: 0;
  transform: scale(0.5);
  transition: 
    opacity var(--transition-fast),
    transform var(--transition-fast);
}

.tile-click-feedback.active {
  opacity: 1;
  transform: scale(1.2);
  animation: click-ripple 600ms ease-out forwards;
}

@keyframes click-ripple {
  0% {
    opacity: 0.8;
    transform: scale(0.8);
  }
  50% {
    opacity: 0.4;
    transform: scale(1.1);
  }
  100% {
    opacity: 0;
    transform: scale(1.4);
  }
}

/* =============================================================================
   SOLUTION #4: Optimisations buttons et interactions
   ============================================================================= */

.optimized-button {
  position: relative;
  overflow: hidden;
  
  /* Transitions optimisées */
  transition: 
    background-color var(--transition-fast),
    transform var(--transition-fast),
    box-shadow var(--transition-fast);
  
  /* Anti-double-click visuel */
  transform: scale(1);
}

.optimized-button:active {
  transform: scale(0.98);
}

.optimized-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important;
}

/* Ripple effect pour feedback immédiat */
.optimized-button::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  transform: translate(-50%, -50%);
  transition: width 600ms, height 600ms;
}

.optimized-button.ripple::after {
  width: 300px;
  height: 300px;
}

/* États loading pour buttons */
.optimized-button.loading {
  color: transparent;
}

.optimized-button.loading::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 20px;
  height: 20px;
  margin: -10px 0 0 -10px;
  border: 2px solid transparent;
  border-top-color: currentColor;
  border-radius: 50%;
  animation: button-spin 1s linear infinite;
}

@keyframes button-spin {
  to { 
    transform: rotate(360deg); 
  }
}

/* =============================================================================
   SOLUTION #5: Optimisations listes et polling
   ============================================================================= */

.player-list {
  transition: all var(--transition-normal);
}

.player-item {
  transition: 
    all var(--transition-normal),
    background-color var(--transition-fast);
  
  /* Préparation pour animations d'entrée/sortie */
  opacity: 1;
  transform: translateX(0);
  max-height: 80px; /* Ajuster selon contenu */
  overflow: hidden;
}

/* Animation d'ajout de joueur */
.player-item.entering {
  opacity: 0;
  transform: translateX(-20px);
  max-height: 0;
  animation: player-enter var(--transition-normal) ease-out forwards;
}

@keyframes player-enter {
  to {
    opacity: 1;
    transform: translateX(0);
    max-height: 80px;
  }
}

/* Animation de suppression de joueur */
.player-item.leaving {
  animation: player-leave var(--transition-normal) ease-in forwards;
}

@keyframes player-leave {
  to {
    opacity: 0;
    transform: translateX(20px);
    max-height: 0;
    padding: 0;
    margin: 0;
  }
}

/* Indicateur de statut joueur avec transitions */
.player-status {
  display: inline-block;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.8em;
  font-weight: 600;
  
  transition: 
    all var(--transition-fast),
    transform var(--transition-bounce);
}

.player-status.ready {
  background: var(--success-bg);
  color: #22c55e;
  border: 1px solid var(--success-border);
}

.player-status.waiting {
  background: var(--loading-bg);
  color: #3b82f6;
  border: 1px solid var(--loading-border);
  
  /* Pulsation subtile pour "en attente" */
  animation: waiting-pulse 2s ease-in-out infinite;
}

@keyframes waiting-pulse {
  0%, 100% { 
    opacity: 0.8; 
  }
  50% { 
    opacity: 1; 
  }
}

/* =============================================================================
   SOLUTION #6: Responsive et performance mobile
   ============================================================================= */

/* Réduction des animations sur mobiles pour économiser la batterie */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* Optimisations pour écrans tactiles */
@media (hover: none) and (pointer: coarse) {
  .optimized-button {
    /* Plus de feedback tactile */
    transform: scale(1);
  }
  
  .optimized-button:active {
    transform: scale(0.95);
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  /* Désactiver les hover effects sur mobile */
  .optimized-button:hover {
    transform: none;
  }
}

/* Optimisations pour écrans à faible densité de pixels */
@media (-webkit-max-device-pixel-ratio: 1) {
  .game-canvas {
    image-rendering: pixelated;
  }
}

/* =============================================================================
   SOLUTION #7: Debug et développement
   ============================================================================= */

/* Mode debug pour visualiser les performances */
.debug-mode .component-loading::after {
  content: 'LOADING';
  position: absolute;
  top: 4px;
  right: 4px;
  background: #ff0000;
  color: white;
  padding: 2px 6px;
  font-size: 10px;
  z-index: 1000;
}

.debug-mode .game-board-container.redrawing::after {
  content: 'REDRAWING';
  position: absolute;
  top: 4px;
  left: 4px;
  background: #ff8800;
  color: white;
  padding: 2px 6px;
  font-size: 10px;
  z-index: 1000;
}

/* Classe utilitaire pour forcer la réaccélération matérielle */
.gpu-accelerated {
  will-change: transform, opacity;
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
}
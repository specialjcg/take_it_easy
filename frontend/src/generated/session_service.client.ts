// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "session_service.proto" (package "takeiteasygame.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SessionService } from "./session_service";
import type { GetSessionStateResponse } from "./session_service";
import type { GetSessionStateRequest } from "./session_service";
import type { SetReadyResponse } from "./session_service";
import type { SetReadyRequest } from "./session_service";
import type { JoinSessionResponse } from "./session_service";
import type { JoinSessionRequest } from "./session_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateSessionResponse } from "./session_service";
import type { CreateSessionRequest } from "./session_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service takeiteasygame.v1.SessionService
 */
export interface ISessionServiceClient {
    /**
     * @generated from protobuf rpc: CreateSession
     */
    createSession(input: CreateSessionRequest, options?: RpcOptions): UnaryCall<CreateSessionRequest, CreateSessionResponse>;
    /**
     * @generated from protobuf rpc: JoinSession
     */
    joinSession(input: JoinSessionRequest, options?: RpcOptions): UnaryCall<JoinSessionRequest, JoinSessionResponse>;
    /**
     * @generated from protobuf rpc: SetReady
     */
    setReady(input: SetReadyRequest, options?: RpcOptions): UnaryCall<SetReadyRequest, SetReadyResponse>;
    /**
     * @generated from protobuf rpc: GetSessionState
     */
    getSessionState(input: GetSessionStateRequest, options?: RpcOptions): UnaryCall<GetSessionStateRequest, GetSessionStateResponse>;
}
/**
 * @generated from protobuf service takeiteasygame.v1.SessionService
 */
export class SessionServiceClient implements ISessionServiceClient, ServiceInfo {
    typeName = SessionService.typeName;
    methods = SessionService.methods;
    options = SessionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateSession
     */
    createSession(input: CreateSessionRequest, options?: RpcOptions): UnaryCall<CreateSessionRequest, CreateSessionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateSessionRequest, CreateSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: JoinSession
     */
    joinSession(input: JoinSessionRequest, options?: RpcOptions): UnaryCall<JoinSessionRequest, JoinSessionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinSessionRequest, JoinSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetReady
     */
    setReady(input: SetReadyRequest, options?: RpcOptions): UnaryCall<SetReadyRequest, SetReadyResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetReadyRequest, SetReadyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSessionState
     */
    getSessionState(input: GetSessionStateRequest, options?: RpcOptions): UnaryCall<GetSessionStateRequest, GetSessionStateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSessionStateRequest, GetSessionStateResponse>("unary", this._transport, method, opt, input);
    }
}

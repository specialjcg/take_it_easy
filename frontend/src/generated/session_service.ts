// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "session_service.proto" (package "takeiteasygame.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GameState } from "./common";
import { Error } from "./common";
import { Player } from "./common";
// ============================================================================
// MESSAGES SESSION SERVICE
// ============================================================================

/**
 * @generated from protobuf message takeiteasygame.v1.CreateSessionRequest
 */
export interface CreateSessionRequest {
    /**
     * @generated from protobuf field: string player_name = 1
     */
    playerName: string;
    /**
     * @generated from protobuf field: int32 max_players = 2
     */
    maxPlayers: number;
    /**
     * @generated from protobuf field: string game_mode = 3
     */
    gameMode: string;
}
/**
 * @generated from protobuf message takeiteasygame.v1.CreateSessionSuccess
 */
export interface CreateSessionSuccess {
    /**
     * @generated from protobuf field: string session_code = 1
     */
    sessionCode: string;
    /**
     * @generated from protobuf field: string session_id = 2
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string player_id = 3
     */
    playerId: string;
    /**
     * @generated from protobuf field: takeiteasygame.v1.Player player = 4
     */
    player?: Player;
}
/**
 * @generated from protobuf message takeiteasygame.v1.CreateSessionResponse
 */
export interface CreateSessionResponse {
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: takeiteasygame.v1.CreateSessionSuccess success = 1
         */
        success: CreateSessionSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: takeiteasygame.v1.Error error = 2
         */
        error: Error;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message takeiteasygame.v1.JoinSessionRequest
 */
export interface JoinSessionRequest {
    /**
     * @generated from protobuf field: string session_code = 1
     */
    sessionCode: string;
    /**
     * @generated from protobuf field: string player_name = 2
     */
    playerName: string;
}
/**
 * @generated from protobuf message takeiteasygame.v1.JoinSessionSuccess
 */
export interface JoinSessionSuccess {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string player_id = 2
     */
    playerId: string;
    /**
     * @generated from protobuf field: takeiteasygame.v1.GameState game_state = 3
     */
    gameState?: GameState;
}
/**
 * @generated from protobuf message takeiteasygame.v1.JoinSessionResponse
 */
export interface JoinSessionResponse {
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: takeiteasygame.v1.JoinSessionSuccess success = 1
         */
        success: JoinSessionSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: takeiteasygame.v1.Error error = 2
         */
        error: Error;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message takeiteasygame.v1.SetReadyRequest
 */
export interface SetReadyRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string player_id = 2
     */
    playerId: string;
    /**
     * @generated from protobuf field: bool ready = 3
     */
    ready: boolean;
}
/**
 * @generated from protobuf message takeiteasygame.v1.SetReadyResponse
 */
export interface SetReadyResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: takeiteasygame.v1.Error error = 2
     */
    error?: Error;
    /**
     * @generated from protobuf field: bool game_started = 3
     */
    gameStarted: boolean;
}
/**
 * @generated from protobuf message takeiteasygame.v1.GetSessionStateRequest
 */
export interface GetSessionStateRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
}
/**
 * @generated from protobuf message takeiteasygame.v1.GetSessionStateResponse
 */
export interface GetSessionStateResponse {
    /**
     * @generated from protobuf field: takeiteasygame.v1.GameState game_state = 1
     */
    gameState?: GameState;
    /**
     * @generated from protobuf field: takeiteasygame.v1.Error error = 2
     */
    error?: Error;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionRequest$Type extends MessageType<CreateSessionRequest> {
    constructor() {
        super("takeiteasygame.v1.CreateSessionRequest", [
            { no: 1, name: "player_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "max_players", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "game_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateSessionRequest>): CreateSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerName = "";
        message.maxPlayers = 0;
        message.gameMode = "";
        if (value !== undefined)
            reflectionMergePartial<CreateSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionRequest): CreateSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player_name */ 1:
                    message.playerName = reader.string();
                    break;
                case /* int32 max_players */ 2:
                    message.maxPlayers = reader.int32();
                    break;
                case /* string game_mode */ 3:
                    message.gameMode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player_name = 1; */
        if (message.playerName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.playerName);
        /* int32 max_players = 2; */
        if (message.maxPlayers !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxPlayers);
        /* string game_mode = 3; */
        if (message.gameMode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gameMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.CreateSessionRequest
 */
export const CreateSessionRequest = new CreateSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionSuccess$Type extends MessageType<CreateSessionSuccess> {
    constructor() {
        super("takeiteasygame.v1.CreateSessionSuccess", [
            { no: 1, name: "session_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "player", kind: "message", T: () => Player }
        ]);
    }
    create(value?: PartialMessage<CreateSessionSuccess>): CreateSessionSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionCode = "";
        message.sessionId = "";
        message.playerId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateSessionSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionSuccess): CreateSessionSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_code */ 1:
                    message.sessionCode = reader.string();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* string player_id */ 3:
                    message.playerId = reader.string();
                    break;
                case /* takeiteasygame.v1.Player player */ 4:
                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_code = 1; */
        if (message.sessionCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionCode);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* string player_id = 3; */
        if (message.playerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.playerId);
        /* takeiteasygame.v1.Player player = 4; */
        if (message.player)
            Player.internalBinaryWrite(message.player, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.CreateSessionSuccess
 */
export const CreateSessionSuccess = new CreateSessionSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionResponse$Type extends MessageType<CreateSessionResponse> {
    constructor() {
        super("takeiteasygame.v1.CreateSessionResponse", [
            { no: 1, name: "success", kind: "message", oneof: "result", T: () => CreateSessionSuccess },
            { no: 2, name: "error", kind: "message", oneof: "result", T: () => Error }
        ]);
    }
    create(value?: PartialMessage<CreateSessionResponse>): CreateSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CreateSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionResponse): CreateSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* takeiteasygame.v1.CreateSessionSuccess success */ 1:
                    message.result = {
                        oneofKind: "success",
                        success: CreateSessionSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).success)
                    };
                    break;
                case /* takeiteasygame.v1.Error error */ 2:
                    message.result = {
                        oneofKind: "error",
                        error: Error.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* takeiteasygame.v1.CreateSessionSuccess success = 1; */
        if (message.result.oneofKind === "success")
            CreateSessionSuccess.internalBinaryWrite(message.result.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* takeiteasygame.v1.Error error = 2; */
        if (message.result.oneofKind === "error")
            Error.internalBinaryWrite(message.result.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.CreateSessionResponse
 */
export const CreateSessionResponse = new CreateSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinSessionRequest$Type extends MessageType<JoinSessionRequest> {
    constructor() {
        super("takeiteasygame.v1.JoinSessionRequest", [
            { no: 1, name: "session_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinSessionRequest>): JoinSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionCode = "";
        message.playerName = "";
        if (value !== undefined)
            reflectionMergePartial<JoinSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinSessionRequest): JoinSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_code */ 1:
                    message.sessionCode = reader.string();
                    break;
                case /* string player_name */ 2:
                    message.playerName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_code = 1; */
        if (message.sessionCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionCode);
        /* string player_name = 2; */
        if (message.playerName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playerName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.JoinSessionRequest
 */
export const JoinSessionRequest = new JoinSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinSessionSuccess$Type extends MessageType<JoinSessionSuccess> {
    constructor() {
        super("takeiteasygame.v1.JoinSessionSuccess", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "game_state", kind: "message", T: () => GameState }
        ]);
    }
    create(value?: PartialMessage<JoinSessionSuccess>): JoinSessionSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.playerId = "";
        if (value !== undefined)
            reflectionMergePartial<JoinSessionSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinSessionSuccess): JoinSessionSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.playerId = reader.string();
                    break;
                case /* takeiteasygame.v1.GameState game_state */ 3:
                    message.gameState = GameState.internalBinaryRead(reader, reader.uint32(), options, message.gameState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinSessionSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string player_id = 2; */
        if (message.playerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playerId);
        /* takeiteasygame.v1.GameState game_state = 3; */
        if (message.gameState)
            GameState.internalBinaryWrite(message.gameState, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.JoinSessionSuccess
 */
export const JoinSessionSuccess = new JoinSessionSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinSessionResponse$Type extends MessageType<JoinSessionResponse> {
    constructor() {
        super("takeiteasygame.v1.JoinSessionResponse", [
            { no: 1, name: "success", kind: "message", oneof: "result", T: () => JoinSessionSuccess },
            { no: 2, name: "error", kind: "message", oneof: "result", T: () => Error }
        ]);
    }
    create(value?: PartialMessage<JoinSessionResponse>): JoinSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<JoinSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinSessionResponse): JoinSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* takeiteasygame.v1.JoinSessionSuccess success */ 1:
                    message.result = {
                        oneofKind: "success",
                        success: JoinSessionSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).success)
                    };
                    break;
                case /* takeiteasygame.v1.Error error */ 2:
                    message.result = {
                        oneofKind: "error",
                        error: Error.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* takeiteasygame.v1.JoinSessionSuccess success = 1; */
        if (message.result.oneofKind === "success")
            JoinSessionSuccess.internalBinaryWrite(message.result.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* takeiteasygame.v1.Error error = 2; */
        if (message.result.oneofKind === "error")
            Error.internalBinaryWrite(message.result.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.JoinSessionResponse
 */
export const JoinSessionResponse = new JoinSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReadyRequest$Type extends MessageType<SetReadyRequest> {
    constructor() {
        super("takeiteasygame.v1.SetReadyRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetReadyRequest>): SetReadyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.playerId = "";
        message.ready = false;
        if (value !== undefined)
            reflectionMergePartial<SetReadyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReadyRequest): SetReadyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.playerId = reader.string();
                    break;
                case /* bool ready */ 3:
                    message.ready = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReadyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string player_id = 2; */
        if (message.playerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playerId);
        /* bool ready = 3; */
        if (message.ready !== false)
            writer.tag(3, WireType.Varint).bool(message.ready);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.SetReadyRequest
 */
export const SetReadyRequest = new SetReadyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReadyResponse$Type extends MessageType<SetReadyResponse> {
    constructor() {
        super("takeiteasygame.v1.SetReadyResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "error", kind: "message", T: () => Error },
            { no: 3, name: "game_started", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetReadyResponse>): SetReadyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.gameStarted = false;
        if (value !== undefined)
            reflectionMergePartial<SetReadyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReadyResponse): SetReadyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* takeiteasygame.v1.Error error */ 2:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* bool game_started */ 3:
                    message.gameStarted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReadyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* takeiteasygame.v1.Error error = 2; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool game_started = 3; */
        if (message.gameStarted !== false)
            writer.tag(3, WireType.Varint).bool(message.gameStarted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.SetReadyResponse
 */
export const SetReadyResponse = new SetReadyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionStateRequest$Type extends MessageType<GetSessionStateRequest> {
    constructor() {
        super("takeiteasygame.v1.GetSessionStateRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSessionStateRequest>): GetSessionStateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<GetSessionStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionStateRequest): GetSessionStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.GetSessionStateRequest
 */
export const GetSessionStateRequest = new GetSessionStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionStateResponse$Type extends MessageType<GetSessionStateResponse> {
    constructor() {
        super("takeiteasygame.v1.GetSessionStateResponse", [
            { no: 1, name: "game_state", kind: "message", T: () => GameState },
            { no: 2, name: "error", kind: "message", T: () => Error }
        ]);
    }
    create(value?: PartialMessage<GetSessionStateResponse>): GetSessionStateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSessionStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionStateResponse): GetSessionStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* takeiteasygame.v1.GameState game_state */ 1:
                    message.gameState = GameState.internalBinaryRead(reader, reader.uint32(), options, message.gameState);
                    break;
                case /* takeiteasygame.v1.Error error */ 2:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* takeiteasygame.v1.GameState game_state = 1; */
        if (message.gameState)
            GameState.internalBinaryWrite(message.gameState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* takeiteasygame.v1.Error error = 2; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.GetSessionStateResponse
 */
export const GetSessionStateResponse = new GetSessionStateResponse$Type();
/**
 * @generated ServiceType for protobuf service takeiteasygame.v1.SessionService
 */
export const SessionService = new ServiceType("takeiteasygame.v1.SessionService", [
    { name: "CreateSession", options: {}, I: CreateSessionRequest, O: CreateSessionResponse },
    { name: "JoinSession", options: {}, I: JoinSessionRequest, O: JoinSessionResponse },
    { name: "SetReady", options: {}, I: SetReadyRequest, O: SetReadyResponse },
    { name: "GetSessionState", options: {}, I: GetSessionStateRequest, O: GetSessionStateResponse }
]);

// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "game_service.proto" (package "takeiteasygame.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GameService } from "./game_service";
import type { GetGameStateResponse } from "./game_service";
import type { GetGameStateRequest } from "./game_service";
import type { StartTurnResponse } from "./game_service";
import type { StartTurnRequest } from "./game_service";
import type { GetAvailableMovesResponse } from "./game_service";
import type { GetAvailableMovesRequest } from "./game_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MakeMoveResponse } from "./game_service";
import type { MakeMoveRequest } from "./game_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service takeiteasygame.v1.GameService
 */
export interface IGameServiceClient {
    /**
     * Faire un mouvement
     *
     * @generated from protobuf rpc: MakeMove
     */
    makeMove(input: MakeMoveRequest, options?: RpcOptions): UnaryCall<MakeMoveRequest, MakeMoveResponse>;
    /**
     * Obtenir les mouvements disponibles
     *
     * @generated from protobuf rpc: GetAvailableMoves
     */
    getAvailableMoves(input: GetAvailableMovesRequest, options?: RpcOptions): UnaryCall<GetAvailableMovesRequest, GetAvailableMovesResponse>;
    /**
     * ðŸŽ² NOUVELLES MÃ‰THODES GAMEPLAY
     *
     * @generated from protobuf rpc: StartTurn
     */
    startTurn(input: StartTurnRequest, options?: RpcOptions): UnaryCall<StartTurnRequest, StartTurnResponse>;
    /**
     * @generated from protobuf rpc: GetGameState
     */
    getGameState(input: GetGameStateRequest, options?: RpcOptions): UnaryCall<GetGameStateRequest, GetGameStateResponse>;
}
/**
 * @generated from protobuf service takeiteasygame.v1.GameService
 */
export class GameServiceClient implements IGameServiceClient, ServiceInfo {
    typeName = GameService.typeName;
    methods = GameService.methods;
    options = GameService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Faire un mouvement
     *
     * @generated from protobuf rpc: MakeMove
     */
    makeMove(input: MakeMoveRequest, options?: RpcOptions): UnaryCall<MakeMoveRequest, MakeMoveResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MakeMoveRequest, MakeMoveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Obtenir les mouvements disponibles
     *
     * @generated from protobuf rpc: GetAvailableMoves
     */
    getAvailableMoves(input: GetAvailableMovesRequest, options?: RpcOptions): UnaryCall<GetAvailableMovesRequest, GetAvailableMovesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAvailableMovesRequest, GetAvailableMovesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ðŸŽ² NOUVELLES MÃ‰THODES GAMEPLAY
     *
     * @generated from protobuf rpc: StartTurn
     */
    startTurn(input: StartTurnRequest, options?: RpcOptions): UnaryCall<StartTurnRequest, StartTurnResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartTurnRequest, StartTurnResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGameState
     */
    getGameState(input: GetGameStateRequest, options?: RpcOptions): UnaryCall<GetGameStateRequest, GetGameStateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGameStateRequest, GetGameStateResponse>("unary", this._transport, method, opt, input);
    }
}

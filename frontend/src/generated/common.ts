// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "common.proto" (package "takeiteasygame.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Types communs partag√©s entre services
 *
 * @generated from protobuf message takeiteasygame.v1.Player
 */
export interface Player {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: int32 score = 3
     */
    score: number;
    /**
     * @generated from protobuf field: bool is_ready = 4
     */
    isReady: boolean;
    /**
     * @generated from protobuf field: bool is_connected = 5
     */
    isConnected: boolean;
    /**
     * @generated from protobuf field: int64 joined_at = 6
     */
    joinedAt: bigint;
}
/**
 * @generated from protobuf message takeiteasygame.v1.GameState
 */
export interface GameState {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: repeated takeiteasygame.v1.Player players = 2
     */
    players: Player[];
    /**
     * @generated from protobuf field: string current_player_id = 3
     */
    currentPlayerId: string;
    /**
     * @generated from protobuf field: takeiteasygame.v1.SessionState state = 4
     */
    state: SessionState;
    /**
     * @generated from protobuf field: string board_state = 5
     */
    boardState: string; // JSON serialized board
    /**
     * @generated from protobuf field: int32 turn_number = 6
     */
    turnNumber: number;
}
/**
 * @generated from protobuf message takeiteasygame.v1.Error
 */
export interface Error {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
    /**
     * @generated from protobuf field: map<string, string> details = 3
     */
    details: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf enum takeiteasygame.v1.SessionState
 */
export enum SessionState {
    /**
     * @generated from protobuf enum value: WAITING = 0;
     */
    WAITING = 0,
    /**
     * @generated from protobuf enum value: IN_PROGRESS = 1;
     */
    IN_PROGRESS = 1,
    /**
     * @generated from protobuf enum value: FINISHED = 2;
     */
    FINISHED = 2,
    /**
     * @generated from protobuf enum value: CANCELLED = 3;
     */
    CANCELLED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("takeiteasygame.v1.Player", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "is_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "joined_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.score = 0;
        message.isReady = false;
        message.isConnected = false;
        message.joinedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 score */ 3:
                    message.score = reader.int32();
                    break;
                case /* bool is_ready */ 4:
                    message.isReady = reader.bool();
                    break;
                case /* bool is_connected */ 5:
                    message.isConnected = reader.bool();
                    break;
                case /* int64 joined_at */ 6:
                    message.joinedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 score = 3; */
        if (message.score !== 0)
            writer.tag(3, WireType.Varint).int32(message.score);
        /* bool is_ready = 4; */
        if (message.isReady !== false)
            writer.tag(4, WireType.Varint).bool(message.isReady);
        /* bool is_connected = 5; */
        if (message.isConnected !== false)
            writer.tag(5, WireType.Varint).bool(message.isConnected);
        /* int64 joined_at = 6; */
        if (message.joinedAt !== 0n)
            writer.tag(6, WireType.Varint).int64(message.joinedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameState$Type extends MessageType<GameState> {
    constructor() {
        super("takeiteasygame.v1.GameState", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "players", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Player },
            { no: 3, name: "current_player_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "state", kind: "enum", T: () => ["takeiteasygame.v1.SessionState", SessionState] },
            { no: 5, name: "board_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "turn_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameState>): GameState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.players = [];
        message.currentPlayerId = "";
        message.state = 0;
        message.boardState = "";
        message.turnNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<GameState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameState): GameState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* repeated takeiteasygame.v1.Player players */ 2:
                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string current_player_id */ 3:
                    message.currentPlayerId = reader.string();
                    break;
                case /* takeiteasygame.v1.SessionState state */ 4:
                    message.state = reader.int32();
                    break;
                case /* string board_state */ 5:
                    message.boardState = reader.string();
                    break;
                case /* int32 turn_number */ 6:
                    message.turnNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* repeated takeiteasygame.v1.Player players = 2; */
        for (let i = 0; i < message.players.length; i++)
            Player.internalBinaryWrite(message.players[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string current_player_id = 3; */
        if (message.currentPlayerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currentPlayerId);
        /* takeiteasygame.v1.SessionState state = 4; */
        if (message.state !== 0)
            writer.tag(4, WireType.Varint).int32(message.state);
        /* string board_state = 5; */
        if (message.boardState !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.boardState);
        /* int32 turn_number = 6; */
        if (message.turnNumber !== 0)
            writer.tag(6, WireType.Varint).int32(message.turnNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.GameState
 */
export const GameState = new GameState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType<Error> {
    constructor() {
        super("takeiteasygame.v1.Error", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "details", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Error>): Error {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        message.details = {};
        if (value !== undefined)
            reflectionMergePartial<Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* map<string, string> details */ 3:
                    this.binaryReadMap3(message.details, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Error["details"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Error["details"] | undefined, val: Error["details"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for takeiteasygame.v1.Error.details");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* map<string, string> details = 3; */
        for (let k of globalThis.Object.keys(message.details))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.details[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message takeiteasygame.v1.Error
 */
export const Error = new Error$Type();
